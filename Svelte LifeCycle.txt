Svelte Lifecycle

onMount : 외부에서 받아온 컴포넌트가 연결이 되었다 = onMount
onDestroy : 연결이 해제되었다 = onDestroyed
beforeUpdate : 반응성을 가지기 전 (화면이 바뀌기 전)
afterUpdate
tick 

-----------------------------------------

컴포넌트를 연결하면 (최초로) 
=> beforeUpdate =DOM과 데이터를 동기화(렌더링) : 화면에 출력하려고 할 때 
=> onMount => afterUpdate

각 LifeCycle을 Lifecycle Hook (훅,후크) 라고도 함 

연결 해제하면, 바로 분리되기 직전에 onDestroy가 실행되니까 여기서 바로 실행하시오 (꺼지기 직전)

------------------------------------------

컨트롤 쉬프트 p => vs코드 명령창
경로> code .  : 경로의 폴더를 vscode로 열어줌
그 다음 npm i로 다시 깔아주고

패키지 안의 dev 찾아서
npm run dev 해서 서버를 열어주자 
------------------------------------------
onDestroy()와 onMount 에서 반환하는 함수는 같은 데에 쓰인다 
onDestroy가 먼저 실행되고, 그 다음에 onMount에서 반환하는 함수가 그 다음에 실행된다

onDestory가 좀 더 직관적이라 이거 쓰야지
onMount 콜백함수에 비동기 처리하는 경우가 있는데 => 리턴되는 값이 비동기 promise 객체로 고정이라
onMount에서 리턴으로 onDestory 구현하려면 비동기가 없는 경우에만 가능 
-------------------------------------------
컴포넌트 실행 순서를 주의해서 로직을 짤 것
------------------------------------------

주의사항 : 반응성을 가지는 데이터가 갱신되는 부분(로직)이 
before / after update 의 콜백 함수 내부에 있으면 무한 루프에 빠질 수 있음 
되도록이면 반응성 갱신하는 로직은 비포/애프터 안에 넣지 말고
꼭 넣어야한다면 조건문을 꼭 걸어서 갱신되지 않도록 주의할 것
------------------------------------------
SPA (Single Page Application) 
SSR (Server Side Rendering)

------------------------------------------
트랜지션 / 애니메이션 